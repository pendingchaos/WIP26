func float(x:float):float {
    return x;
}

func vec2(x:float, y:float):vec2 {
    var res:vec2;
    res.x = x;
    res.y = y;
    return res;
}

func vec2(xy:float):vec2 {
    return xy.xx;
}

func vec3(x:float, y:float, z:float):vec3 {
    var res:vec3;
    res.x = x;
    res.y = y;
    res.z = z;
    return res;
}

func vec3(xyz:float):vec3 {
    return xyz.xxx;
}

func vec4(x:float, y:float, z:float, w:float):vec4 {
    var res:vec4;
    res.x = x;
    res.y = y;
    res.z = z;
    res.w = w;
    return res;
}

func vec4(xyzw:float):vec4 {
    return xyzw.xxxx;
}

func bool(x:bool):bool {
    return x;
}

func bvec2(x:bool, y:bool):bvec2 {
    var res:bvec2;
    res.x = x;
    res.y = y;
    return res;
}

func bvec2(xy:bool):bvec2 {
    return xy.xx;
}

func bvec3(x:bool, y:bool, z:bool):bvec3 {
    var res:bvec3;
    res.x = x;
    res.y = y;
    res.z = z;
    return res;
}

func bvec3(xyz:bool):bvec3 {
    return xyz.xxx;
}

func bvec4(x:bool, y:bool, z:bool, w:bool):bvec4 {
    var res:bvec4;
    res.x = x;
    res.y = y;
    res.z = z;
    res.w = w;
    return res;
}

func bvec4(xyzw:bool):bvec4 {
    return xyzw.xxxx;
}

func dot(a:float, b:float):float {
    return a*b;
}

func dot(a:vec2, b:vec2):float {
    return a.x*b.x + a.y*b.y;
}

func dot(a:vec3, b:vec3):float {
    return a.x*b.x + a.y*b.y + a.z*b.z;
}

func dot(a:vec4, b:vec4):float {
    return a.x*b.x + a.y*b.y + a.z*b.z + a.w*b.w;
}

func lerp(a:float, b:float, f:float):float {
    return a*(1-f) + b*f;
}

func lerp(a:vec2, b:vec2, f:vec2):vec2 {
    return a*(vec2(1)-f) + b*f;
}

func lerp(a:vec3, b:vec3, f:vec3):vec3 {
    return a*(vec3(1)-f) + b*f;
}

func lerp(a:vec4, b:vec4, f:vec4):vec4 {
    return a*(vec4(1)-f) + b*f;
}

func sel(a:float, b:float, cond:bool):float {
    return __sel(a, b, cond);
}

func sel(a:vec2, b:vec2, cond:bvec2):vec2 {
    return __sel(a, b, cond);
}

func sel(a:vec3, b:vec3, cond:bvec3):vec3 {
    return __sel(a, b, cond);
}

func sel(a:vec4, b:vec4, cond:bvec4):vec4 {
    return __sel(a, b, cond);
}

func sel(a:vec2, b:vec2, cond:bool):vec2 {
    return __sel(a, b, bvec2(cond));
}

func sel(a:vec3, b:vec3, cond:bool):vec3 {
    return __sel(a, b, bvec3(cond));
}

func sel(a:vec4, b:vec4, cond:bool):vec4 {
    return __sel(a, b, bvec4(cond));
}

func abs(v:float):float {
    return sel(-v, v, v<0.0);
}

func abs(v:vec2):vec2 {
    return sel(-v, v, v<vec2(0.0));
}

func abs(v:vec3):vec3 {
    return sel(-v, v, v<vec3(0.0));
}

func abs(v:vec4):vec4 {
    return sel(-v, v, v<vec4(0.0));
}

func length(v:float):float {
    return abs(v);
}

func sqrt(x:float):float {
    return __sqrt(x);
}

func sqrt(x:vec2):vec2 {
    return __sqrt(x);
}

func sqrt(x:vec3):vec3 {
    return __sqrt(x);
}

func sqrt(x:vec4):vec4 {
    return __sqrt(x);
}

func length(v:vec2):float {
    return sqrt(dot(v, v));
}

func length(v:vec3):float {
    return sqrt(dot(v, v));
}

func length(v:vec4):float {
    return sqrt(dot(v, v));
}

func normalize(v:float):float {
    return v / length(v);
}

func normalize(v:vec2):vec2 {
    return v / vec2(length(v));
}

func normalize(v:vec3):vec3 {
    return v / vec3(length(v));
}

func normalize(v:vec4):vec4 {
    return v / vec4(length(v));
}

func min(a:float, b:float):float {
    return sel(a, b, a<b);
}

func min(a:vec2, b:vec2):vec2 {
    return sel(a, b, a<b);
}

func min(a:vec3, b:vec3):vec3 {
    return sel(a, b, a<b);
}

func min(a:vec4, b:vec4):vec4 {
    return sel(a, b, a<b);
}

func min(v:float):float {
    return v;
}

func min(v:vec2):float {
    return min(v.x, v.y);
}

func min(v:vec3):float {
    return min(v.x, min(v.y, v.z));
}

func min(v:vec4):float {
    return min(min(v.x, v.y), min(v.z, v.w));
}

func max(a:float, b:float):float {
    return sel(a, b, a>b);
}

func max(a:vec2, b:vec2):vec2 {
    return sel(a, b, a>b);
}

func max(a:vec3, b:vec3):vec3 {
    return sel(a, b, a>b);
}

func max(a:vec4, b:vec4):vec4 {
    return sel(a, b, a>b);
}

func max(v:float):float {
    return v;
}

func max(v:vec2):float {
    return max(v.x, v.y);
}

func max(v:vec3):float {
    return max(v.x, max(v.y, v.z));
}

func max(v:vec4):float {
    return max(max(v.x, v.y), max(v.z, v.w));
}

func saturate(x:float):float {
    return min(max(x, 0.0), 1.0);
}

func saturate(x:vec2):vec2 {
    return min(max(x, vec2(0.0)), vec2(1.0));
}

func saturate(x:vec3):vec3 {
    return min(max(x, vec3(0.0)), vec3(1.0));
}

func saturate(x:vec4):vec4 {
    return min(max(x, vec4(0.0)), vec4(1.0));
}

func clamp(x:float, lo:float, hi:float):float {
    return min(max(x, lo), hi);
}

func clamp(x:vec2, lo:vec2, hi:vec2):vec2 {
    return min(max(x, lo), hi);
}

func clamp(x:vec3, lo:vec3, hi:vec3):vec3 {
    return min(max(x, lo), hi);
}

func clamp(x:vec4, lo:vec4, hi:vec4):vec4 {
    return min(max(x, lo), hi);
}

func any(v:bool):bool {
    return v;
}

func any(v:bvec2):bool {
    return v.x || v.y;
}

func any(v:bvec3):bool {
    return v.x || v.y || v.z;
}

func any(v:bvec4):bool {
    return v.x || v.y || v.z || v.w;
}

func all(v:bool):bool {
    return v;
}

func all(v:bvec2):bool {
    return v.x && v.y;
}

func all(v:bvec3):bool {
    return v.x && v.y && v.z;
}

func all(v:bvec4):bool {
    return v.x && v.y && v.z && v.w;
}

func del():void {
    __del();
}

func emit():void {
    __emit();
}

func rand1():float {
    return __rand();
}

func rand2():vec2 {
    return vec2(rand1(), rand1());
}

func rand3():vec3 {
    return vec3(rand1(), rand1(), rand1());
}

func rand4():vec4 {
    return vec4(rand1(), rand1(), rand1(), rand1());
}

func floor(v:float):float {
    return __floor(v);
}

func floor(v:vec2):vec2 {
    return __floor(v);
}

func floor(v:vec3):vec3 {
    return __floor(v);
}

func floor(v:vec4):vec4 {
    return __floor(v);
}

func ceil(v:float):float {
    return floor(v) + 1;
}

func ceil(v:vec2):vec2 {
    return floor(v) + vec2(1);
}

func ceil(v:vec3):vec3 {
    return floor(v) + vec3(1);
}

func ceil(v:vec4):vec4 {
    return floor(v) + vec4(1);
}

func fract(v:float):float {
    return v - floor(v);
}

func fract(v:vec2):vec2 {
    return v - floor(v);
}

func fract(v:vec3):vec3 {
    return v - floor(v);
}

func fract(v:vec4):vec4 {
    return v - floor(v);
}
